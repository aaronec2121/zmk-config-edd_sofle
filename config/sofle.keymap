#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_36keys.h"
#include "../zmk-nodefree-config/international_chars/german.dtsi"

#define BASE 0
#define RAISE 1
#define MIRROR 2
#define ADJUST 3
#define NAV 4

#define MO_TOG(layer) &mo_tog layer layer   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer
#define COMBO(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <40>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <0 1 2>; \
  };

#define STRINGIFY(x) #x
#define EXPAND_AND_STRINGIFY(x) STRINGIFY(x)
#define MACRO(NAME, BINDINGS) \
  mcr_##NAME: mcr_##NAME { \
    label = EXPAND_AND_STRINGIFY(mcr_##NAME); \
    compatible = "zmk,behavior-macro"; \
    #binding-cells = <0>; \
    wait-ms = <20>; \
    tap-ms = <10>; \
    bindings = <BINDINGS>; \
  };

ZMK_UNICODE_SINGLE(ucd_delta,  N0, N3, N9, N4)

&mt {
    tapping-term-ms = <200>;
    retro-tap;
};
    
/ {
    macros {
        // Symbol macros and others
        MACRO(deg, &macro_press &kp LALT &macro_tap &kp KP_N2 &kp KP_N4 &kp KP_N8 &macro_release &kp LALT)
        MACRO(mu, &macro_press &kp LALT &macro_tap &kp KP_N2 &kp KP_N3 &kp KP_N0 &macro_release &kp LALT)
        MACRO(eps, &macro_press &kp LALT &macro_tap &kp KP_N2 &kp KP_N3 &kp KP_N8 &macro_release &kp LALT)
        MACRO(pi, &macro_press &kp LALT &macro_tap &kp KP_N2 &kp KP_N2 &kp KP_N7 &macro_release &kp LALT)
        MACRO(sig, &macro_press &kp LALT &macro_tap &kp KP_N2 &kp KP_N2 &kp KP_N9 &macro_release &kp LALT)
        MACRO(plsmns, &macro_press &kp LALT &macro_tap &kp KP_N0 &kp KP_N1 &kp KP_N7 &kp KP_N7 &macro_release &kp LALT)
        MACRO(int, &macro_press &kp LSHFT &macro_tap &kp I &macro_release &kp LSHFT &macro_tap &kp N &kp T &kp E &kp R &kp F &kp E &kp R &kp O &kp M &kp E &kp T &kp E &kp R &kp N5)
        MACRO(paren, &macro_tap &kp F2 &kp LPAR &kp RPAR &kp LEFT)

        // Macros to move by whole words and select words
        MACRO(prv_wrd, &macro_press &kp LCTRL &macro_tap &kp LEFT &macro_release &kp LCTRL)
        MACRO(nxt_wrd, &macro_press &kp LCTRL &macro_tap &kp RIGHT &macro_release &kp LCTRL)
        MACRO(sel_prv, &macro_press &kp LCTRL &kp LSHFT &macro_tap &kp LEFT &macro_release &kp LCTRL &kp LSHFT)
        MACRO(sel_wrd, &macro_press &kp LCTRL &macro_tap &kp RIGHT &macro_press &kp LSHFT &macro_tap &kp LEFT &macro_release &kp LCTRL &kp LSHFT)
        MACRO(sel_nxt, &macro_press &kp LCTRL &kp LSHFT &macro_tap &kp RIGHT &macro_release &kp LCTRL &kp LSHFT)

        // Macros to type common decimal numbers in SolidWorks
        MACRO(025, &macro_press &kp LCTRL &macro_tap &kp A &macro_release &kp LCTRL &macro_tap &kp KP_N0 &kp DOT &kp KP_N0 &kp KP_N2 &kp KP_N5 &macro_tap &kp RET)
        MACRO(100, &macro_press &kp LCTRL &macro_tap &kp A &macro_release &kp LCTRL &macro_tap &kp KP_N0 &kp DOT &kp KP_N1 &macro_tap &kp RET)
        MACRO(125, &macro_press &kp LCTRL &macro_tap &kp A &macro_release &kp LCTRL &macro_tap &kp KP_N0 &kp DOT &kp KP_N1 &kp KP_N2 &kp KP_N5 &macro_tap &kp RET)
        MACRO(187, &macro_press &kp LCTRL &macro_tap &kp A &macro_release &kp LCTRL &macro_tap &kp KP_N0 &kp DOT &kp KP_N1 &kp KP_N8 &kp KP_N7 &kp KP_N5 &macro_tap &kp RET)
        MACRO(250, &macro_press &kp LCTRL &macro_tap &kp A &macro_release &kp LCTRL &macro_tap &kp KP_N0 &kp DOT &kp KP_N2 &kp KP_N5 &macro_tap &kp RET)
        MACRO(375, &macro_press &kp LCTRL &macro_tap &kp A &macro_release &kp LCTRL &macro_tap &kp KP_N0 &kp DOT &kp KP_N3 &kp KP_N7 &kp KP_N5 &macro_tap &kp RET)
        MACRO(500, &macro_press &kp LCTRL &macro_tap &kp A &macro_release &kp LCTRL &macro_tap &kp KP_N0 &kp DOT &kp KP_N5 &macro_tap &kp RET)
        MACRO(625, &macro_press &kp LCTRL &macro_tap &kp A &macro_release &kp LCTRL &macro_tap &kp KP_N0 &kp DOT &kp KP_N6 &kp KP_N2 &kp KP_N5 &macro_tap &kp RET)
        MACRO(750, &macro_press &kp LCTRL &macro_tap &kp A &macro_release &kp LCTRL &macro_tap &kp KP_N0 &kp DOT &kp KP_N7 &kp KP_N5 &macro_tap &kp RET)
        MACRO(875, &macro_press &kp LCTRL &macro_tap &kp A &macro_release &kp LCTRL &macro_tap &kp KP_N0 &kp DOT &kp KP_N8 &kp KP_N7 &kp KP_N5 &macro_tap &kp RET)
};

        combos {
            compatible = "zmk,combos";

/*                        KEY POSITIONS
  ╭────────────────────────╮         ╭────────────────────────╮
  │  0   1   2   3   4   5 │         │  6   7   8   9  10  11 │
  │ 12  13  14  15  16  17 │         │ 18  19  20  21  22  23 │
  │ 24  25  26  27  28  29 ╰───╮ ╭───╯ 30  31  32  33  34  35 │
  │ 36  37  38  39  40  41  42 | | 43  44  45  46  47  48  49 │  encoder pushbuttons on 42 and 43
  ╰───────╮ 50  51  52  53  54 │ │ 55  56  57  58  59 ╭───────╯
          ╰────────────────────╯ ╰────────────────────╯        */

/*╭─────────────────────────╮   COMBOS   ╭────────────────────────╮
  │ _   _    _    _   _   _ │    with    │  _   _   _   _   _   _ │
  │ _   _    _    _   _   _ │ RAISE (53) │  _   _   _   _   _   _ │
  │ _   _    _    _   _{±}_ ╰────╮   ╭───╯  _   _   _   _   _   _ │
  │ _   π    °    σ   µ   ε    _ |   | _    _   _   _   _   _   _ │
  ╰───────╮ PSCRN _   _  RAISE _ │   │ _    _   _   _   _ ╭───────╯
          ╰──────────────────────╯   ╰────────────────────╯        */
            COMBO(cmb_delta, &ucd_delta, 36 53)
            COMBO(cmb_pi, &mcr_pi, 37 53)
            COMBO(cmb_deg, &mcr_deg, 38 53)
            COMBO(cmb_sig, &mcr_sig, 39 53)
            COMBO(cmb_mu, &mcr_mu, 40 53)
            COMBO(cmb_eps, &mcr_eps, 41 53)
            COMBO(cmb_plsmns, &mcr_plsmns, 28 29 53)
            COMBO(cmb_pscrn, &kp PSCRN, 50 53)

/*╭─────────────────────────────╮   COMBOS   ╭────────────────────────╮
  │ _   _    _    _    _    _   │    with    │  _   _   _   _   _   _ │
  │ _  .375 .500 .625 .750 .875 │ SPACE (54) │  _   _   _   _   _   _ │
  │ _  .025 .100 .125 .187 .250 ╰───╮    ╭───╯  _   _   _   _   _   _ │
  │ _   _    _    _    _    _    _  |    | _    _   _   _   _   _   _ │
  ╰───────╮  _    _    _    _    _  │    │ _    _   _   _   _ ╭───────╯
          ╰─────────────────────────╯    ╰────────────────────╯        */
            COMBO(cmb_025, &mcr_025, 25 54)
            COMBO(cmb_100, &mcr_100, 26 54)
            COMBO(cmb_125, &mcr_125, 27 54)
            COMBO(cmb_187, &mcr_187, 28 54)
            COMBO(cmb_250, &mcr_250, 29 54)
            COMBO(cmb_375, &mcr_375, 13 54)
            COMBO(cmb_500, &mcr_500, 14 54)
            COMBO(cmb_625, &mcr_625, 15 54)
            COMBO(cmb_750, &mcr_750, 16 54)
            COMBO(cmb_875, &mcr_875, 17 54)

/*╭─────────────────────────╮  OTHER   ╭────────────────────────╮
  │ _   _    _    _   _   _ │  COMBOS  │  _   _   _   _   _   _ │
  │ _   _{bs}_{dl}_   _{+}_ │          │  _   _   _   _   _   _ │
  │ _   _    _    _   _{-}_ ╰────╮ ╭───╯  _   _   _   _   _   _ │
  │ _   _    _    _   _   _    _ | | _    _   _   _   _   _   _ │
  ╰──────╮   _    _   _   _    _ │ │ _    _   _{^}_   _ ╭───────╯
         ╰───────────────────────╯ ╰────────────────────╯        */
            COMBO(cmb_bspc, &kp BSPC, 13 14)
            COMBO(cmb_del, &kp DEL, 14 15)
            COMBO(cmb_plus, &kp PLUS, 16 17)
            COMBO(cmb_minus, &kp MINUS, 28 29)
            COMBO(cmb_up, &kp UP, 57 58)        // Up arrow by pressing left and down
            COMBO(cmb_int, &mcr_int, 9 10 11)
        };
};
/ {
    behaviors {
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_tog";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };
        td_Lshftcaps: td_Lshftcaps {
            compatible = "zmk,behavior-tap-dance";
            label = "td_Lshftcaps";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LSHFT>, <&kp CAPS>;
        };
    };
  
    keymap {
        compatible = "zmk,keymap";
        
        default_layer {
/* ╭─────────────────────────────────╮                 ╭──────────────────────────────────╮
   |   ESC    1    2    3    4    5  |                 |  6    7    8    9    0    BKSPC  |
   |   TAB    Q    W    E    R    T  |                 |  Y    U    I    O    P     \ |   |
   |SHFT/CAP  A    S    D    F    G  ╰───────╮ ╭───────╯  H    J    K    L    ;:    ' "   |
   |   CTRL   Z    X    C    V    B     C_PP | | C_PP     N    M    ,    .    /?  SHFT/RET|
   ╰────────────╮ WIN  ALT ENTER RAISE SPACE | | SPACE RAISE   <-   v   -> ╭──────────────╯
                ╰────────────────────────────╯ ╰───────────────────────────╯              */
            bindings = <
&kp ESC       &kp N1 &kp N2   &kp N3   &kp N4  &kp N5                                &kp N6    &kp N7   &kp N8    &kp N9   &kp N0   &kp BSPC
&kp TAB       &kp Q  &kp W    &kp E    &kp R   &kp T                                 &kp Y     &kp U    &kp I     &kp O    &kp P    &kp BSLH
&td_Lshftcaps &kp A  &kp S    &kp D    &kp F   &kp G                                 &kp H     &kp J    &kp K     &kp L    &kp SEMI &kp APOS
&kp LCTRL     &kp Z  &kp X    &kp C    &kp V   &kp B     &kp C_PP      &kp C_PP      &kp N     &kp M    &kp COMMA &kp DOT  &kp FSLH &mt RSHFT RET
                     &kp LGUI &kp LALT &kp RET &mo RAISE &lt NAV SPACE &lt NAV SPACE &mo RAISE &kp LEFT &kp DOWN  &kp RIGHT
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp mcr_prv_wrd mcr_nxt_wrd>;
        };
        
        raise_layer {
/* ╭───────────────────────────────────╮               ╭───────────────────────────────────╮
   |    `      ~     (    )    $    () |               | .025  .125  .25  .375  0.5  BKSPC |
   |   TAB     7     8    9    =    _  |               |  σ     µ     ε    {     }   BSLH  |
   |           4     5    6    *    /  ╰──────╮ ╭──────╯ PG_UP PG_DN       [     ]         |
   | MirrorLyr 1     2    3  HOME  END   C_PP | | C_PP   HOME  END    ,    .      AdjustLyr|
   ╰────────────╮    0    .  ENTER      SPACE | | SPACE         <-    v   -> ╭─────────────╯
                ╰─────────────────────────────╯ ╰────────────────────────────╯              */
            bindings = <
&kp GRAVE  &kp TILDE &kp LPAR &kp RPAR &kp DLLR  &mcr_paren                   &mcr_025  &mcr_125  &mcr_250    &mcr_375 &mcr_500 &kp BSPC
&trans     &kp N7    &kp N8   &kp N9   &kp EQUAL &kp UNDER                    &mcr_sig  &mcr_mu   &mcr_eps    &kp LBRC &kp RBRC &kp BSLH
&trans     &kp N4    &kp N5   &kp N6   &kp STAR  &kp FSLH                     &kp PG_UP &kp PG_DN &mcr_plsmns &kp LBKT &kp RBKT &none
&mo MIRROR &kp N1    &kp N2   &kp N3   &kp HOME  &kp END   &trans      &trans &kp HOME  &kp END   &trans      &trans   &none    &mo ADJUST
                     &kp N0   &kp DOT  &trans    &trans    &trans      &trans &trans    &trans    &trans      &trans
            >;
            sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT>;
        };

        mirror_layer {
/* ╭─────────────────────────────────╮               ╭─────────────────────────╮
   | BKSPC   0     9    8    7    6  |               │                         │
   |   |     P     O    I    U    Y  |               │                         │
   |         ;:    L    K    J    H  ╰──────╮ ╭──────╯                         │
   |         /?    .    ,    M    N    C_PP | | C_PP                           │
   ╰────────────╮                     SPACE | |                       ╭────────╯
                ╰───────────────────────────╯ ╰───────────────────────╯         */
            bindings = <
&kp BSPC &kp N0   &kp N9  &kp N8    &kp N7 &kp N6                 &none &none  &none &none &none &none
&kp PIPE &kp P    &kp O   &kp I     &kp U  &kp Y                  &none &none  &none &none &none &none
&trans   &kp SEMI &kp L   &kp K     &kp J  &kp H                  &none &none  &none &none &none &none
&trans   &kp FSLH &kp DOT &kp COMMA &kp M  &kp N  &trans   &trans &none &none  &none &none &none &none
                  &none   &none     &none  &trans &trans   &none  &none &none &none &none
            >;
            sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT>;
        };
        
        adjust_layer {
/* ╭─────────────────────────────────╮          ╭─────────────────────────╮
   │ BTCLR   BT1  BT2  BT3  BT4  BT5 │          │  _   _   _   _   _   _  │
   │ ExtPwr  Hue+ Sat+ Bri+  _    _  │          │  _   _   _   _   _   _  │
   │ TogRGB  Hue- Sat- Bri- Eff   _  ╰────╮ ╭───╯  _   _   _   _   _   _  │
   │   _      _    _    _    _    _     _ | | _    _   _   _   _   _   _  │
   ╰────────╮ _    _    _    _    _     _ │ │ _    _   _   _   _ ╭────────╯
            ╰─────────────────────────────╯ ╰────────────────────╯        */
        bindings = <
&bt BT_CLR                      &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4               &none &none &none &none &none &none
&ext_power EXT_POWER_TOGGLE_CMD &rgb_ug RGB_HUI &rgb_ug RGB_SAI &rgb_ug RGB_BRI &none           &none                      &none &none &none &none &none &none
&rgb_ug RGB_TOG                 &rgb_ug RGB_HUD &rgb_ug RGB_SAD &rgb_ug RGB_BRD &rgb_ug RGB_EFF &none                      &none &none &none &none &none &none
&none                           &none           &none           &none           &none           &none        &trans &trans &none &none &none &none &none &none
                                                &none           &none           &none           &none        &none  &none  &none &none &none &none
            >;
            sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT>;
        };

  nav_layer {
/* ╭───────────────────────────────────────╮         ╭─────────────────────────╮
   │   _    _    _    _       _       _    │         │  _   _   _   _   _   _  │
   │   _    _    ^ sel_prv sel_wrd sel_nxt │         │  _   _   _   _   _   _  │
   │   _    <    v    >    prv_wrd nxt_wrd ╰───╮ ╭───╯  _   _   _   _   _   _  │
   │   _    _    _    _     HOME     END     _ | | _    _   _   _   _   _   _  │
   ╰──────╮ _    _    _       _       _      _ │ │ _    _   _   _   _ ╭────────╯
          ╰────────────────────────────────────╯ ╰────────────────────╯        */
        bindings = <
&none &none    &none    &none        &none        &none                      &none &none &none &none &none &none
&none &none    &kp UP   &mcr_sel_prv &mcr_sel_wrd &mcr_sel_nxt               &none &none &none &none &none &none
&none &kp LEFT &kp DOWN &kp RIGHT    &mcr_prv_wrd &mcr_nxt_wrd               &none &none &none &none &none &none
&none &none    &none    &none        &kp HOME     &kp END      &trans &trans &none &none &none &none &none &none
               &none    &none        &none        &none        &trans &trans &none &none &none &none
            >;
            sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT>;
        };
    };
};
